import os
import json
import asyncio
import firebase_admin
from firebase_admin import credentials, firestore
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# üîç –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
print("\nüîç [LOG] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞...")
print(f"BOT_TOKEN: {os.getenv('BOT_TOKEN')[:10]}... (–æ–±—Ä—ñ–∑–∞–Ω–æ –¥–ª—è –±–µ–∑–ø–µ–∫–∏)")
print(f"ADMIN_ID: {os.getenv('ADMIN_ID')}")
print(f"FIREBASE_CREDENTIALS: {'‚úÖ –Ñ' if os.getenv('FIREBASE_CREDENTIALS') else '‚ùå –ù–µ–º–∞—î'}")

# üî• –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))  # –Ø–∫—â–æ ADMIN_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è 0

# üî• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
if not TOKEN:
    raise ValueError("‚ùå –ü–æ–º–∏–ª–∫–∞: –∑–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

if ADMIN_ID == 0:
    print("‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: ADMIN_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ë–æ—Ç –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ –±–µ–∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# üî• –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Firebase —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
firebase_credentials_str = os.getenv("FIREBASE_CREDENTIALS")

if not firebase_credentials_str:
    raise ValueError("‚ùå –ü–æ–º–∏–ª–∫–∞: –∑–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ FIREBASE_CREDENTIALS –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

try:
    FIREBASE_JSON = json.loads(firebase_credentials_str)
    print("‚úÖ [LOG] Firebase JSON —É—Å–ø—ñ—à–Ω–æ –∑—á–∏—Ç–∞–Ω–æ!")
except json.JSONDecodeError:
    raise ValueError("‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON —É FIREBASE_CREDENTIALS!")

# üî• –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Firebase
try:
    cred = credentials.Certificate(FIREBASE_JSON)
    firebase_admin.initialize_app(cred)
    db = firestore.client()
    print("‚úÖ [LOG] Firebase —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!")
except Exception as e:
    print(f"‚ùå [ERROR] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Firebase: {e}")
    raise

# üî• –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram-–±–æ—Ç–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
print("‚úÖ [LOG] –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!")

# üìå **–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é**
main_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üìã –ú–µ–Ω—é")]],
    resize_keyboard=True
)

# üìå **–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Å–∞–π—Ç—ñ–≤**
def get_sites():
    try:
        requests_ref = db.collection("requests")
        docs = requests_ref.stream()
        sites = set()

        for doc in docs:
            data = doc.to_dict()
            sites.add(data.get("site", "–ù–µ–≤—ñ–¥–æ–º–∏–π —Å–∞–π—Ç"))

        print(f"‚úÖ [LOG] –û—Ç—Ä–∏–º–∞–Ω–æ {len(sites)} —Å–∞–π—Ç—ñ–≤ –∑ Firebase.")
        return list(sites)
    except Exception as e:
        print(f"‚ùå [ERROR] –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–∞–π—Ç–∏: {e}")
        return []

# üìå **–ö–æ–º–∞–Ω–¥–∞ /start**
@dp.message(Command("start"))
async def start(message: types.Message):
    print(f"üì© [LOG] –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /start –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
    await message.answer("üîπ –í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∑–∞—è–≤–∫–∞–º–∏.\n\n‚Ñπ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å üìã –ú–µ–Ω—é, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞—è–≤–∫–∏.", reply_markup=main_menu)

# üìå **–ö–æ–º–∞–Ω–¥–∞ /menu (–ø–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç—ñ–≤)**
@dp.message(lambda message: message.text == "üìã –ú–µ–Ω—é" or message.text == "/menu")
async def menu(message: types.Message):
    print(f"üì© [LOG] –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /menu –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
    sites = get_sites()
    if not sites:
        await message.answer("‚ö†Ô∏è –ñ–æ–¥–µ–Ω —Å–∞–π—Ç —â–µ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–≤ –∑–∞—è–≤–∫–∏.")
        return

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=site, callback_data=f"site|{site}")] for site in sites
        ]
    )
    await message.answer("üìå –û–±–µ—Ä—ñ—Ç—å —Å–∞–π—Ç, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞—è–≤–∫–∏:", reply_markup=markup)

# üìå **–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Å–∞–π—Ç—É**
@dp.callback_query(lambda c: c.data.startswith("site|"))
async def show_site_options(callback_query: types.CallbackQuery):
    site = callback_query.data.split("|")[1]
    print(f"üì© [LOG] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–±—Ä–∞–≤ —Å–∞–π—Ç: {site}")

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìû –ü–µ—Ä–µ–¥–∑–≤–æ–Ω–∏—Ç–∏", callback_data=f"phone|{site}")],
            [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ –≤ —á–∞—Ç", callback_data=f"chat|{site}")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu")]
        ]
    )
    await callback_query.message.delete()
    await callback_query.message.answer(f"üìå <b>{site}</b>\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞—è–≤–æ–∫:", reply_markup=markup)

# üìå **–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞**
async def main():
    print("üîÑ [LOG] –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    print(f"‚úÖ [LOG] –ë–æ—Ç –ø—Ä–∞—Ü—é—î! –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...\nüë®‚Äçüíª –ê–¥–º—ñ–Ω ID: {ADMIN_ID}")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
