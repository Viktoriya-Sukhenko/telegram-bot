import os
import json
import asyncio
import firebase_admin
from firebase_admin import credentials, firestore
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# üî• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑—ñ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("BOT_TOKEN")  # Telegram Bot Token
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))  # ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–º—ñ–Ω–Ω–∞ –º–∞—î –±—É—Ç–∏ —É Railway)

# üî• –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Firebase —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
FIREBASE_JSON = json.loads(os.getenv("FIREBASE_CREDENTIALS"))
cred = credentials.Certificate(FIREBASE_JSON)
firebase_admin.initialize_app(cred)
db = firestore.client()

# üî• –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram-–±–æ—Ç–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# üìå **–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é**
main_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üìã –ú–µ–Ω—é")]],
    resize_keyboard=True
)

# üìå **–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Å–∞–π—Ç—ñ–≤**
def get_sites():
    requests_ref = db.collection("requests")
    docs = requests_ref.stream()
    sites = set()

    for doc in docs:
        data = doc.to_dict()
        sites.add(data.get("site", "–ù–µ–≤—ñ–¥–æ–º–∏–π —Å–∞–π—Ç"))

    return list(sites)

# üìå **–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—è–≤–æ–∫ –¥–ª—è —Å–∞–π—Ç—É**
def get_requests_by_site(site, status=None):
    requests_ref = db.collection("requests").where("site", "==", site)
    if status:
        requests_ref = requests_ref.where("status", "==", status)

    docs = requests_ref.stream()
    
    phone_requests = []
    chat_requests = []

    for doc in docs:
        data = doc.to_dict()
        data["id"] = doc.id

        if data.get("phone") and data["phone"] != "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ":
            phone_requests.append(data)
        elif data.get("social") and data["social"] != "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ":
            chat_requests.append(data)

    return phone_requests, chat_requests

# üìå **–ö–æ–º–∞–Ω–¥–∞ /start**
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("üîπ –í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∑–∞—è–≤–∫–∞–º–∏.\n\n‚Ñπ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å üìã –ú–µ–Ω—é, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞—è–≤–∫–∏.", reply_markup=main_menu)

# üìå **–ö–æ–º–∞–Ω–¥–∞ /menu (–ø–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç—ñ–≤)**
@dp.message(lambda message: message.text == "üìã –ú–µ–Ω—é" or message.text == "/menu")
async def menu(message: types.Message):
    sites = get_sites()
    if not sites:
        await message.answer("‚ö†Ô∏è –ñ–æ–¥–µ–Ω —Å–∞–π—Ç —â–µ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–≤ –∑–∞—è–≤–∫–∏.")
        return

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=site, callback_data=f"site|{site}")] for site in sites
        ]
    )
    await message.answer("üìå –û–±–µ—Ä—ñ—Ç—å —Å–∞–π—Ç, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞—è–≤–∫–∏:", reply_markup=markup)

# üìå **–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Å–∞–π—Ç—É**
@dp.callback_query(lambda c: c.data.startswith("site|"))
async def show_site_options(callback_query: types.CallbackQuery):
    site = callback_query.data.split("|")[1]

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìû –ü–µ—Ä–µ–¥–∑–≤–æ–Ω–∏—Ç–∏", callback_data=f"phone|{site}")],
            [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ –≤ —á–∞—Ç", callback_data=f"chat|{site}")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu")]
        ]
    )
    await callback_query.message.delete()
    await callback_query.message.answer(f"üìå <b>{site}</b>\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞—è–≤–æ–∫:", reply_markup=markup)

# üìå **–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞**
async def main():
    print("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    print("‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î! –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
